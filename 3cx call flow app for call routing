using CallFlow.CFD;
using CallFlow;
using MimeKit;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks.Dataflow;
using System.Threading.Tasks;
using System.Threading;
using System;
using TCX.Configuration;

namespace shyft
{
    public class Main : ScriptBase<Main>, ICallflow, ICallflowProcessor
    {
        private bool executionStarted;
        private bool executionFinished;
        private bool disconnectFlowPending;

        private BufferBlock<AbsEvent> eventBuffer;

        private int currentComponentIndex;
        private List<AbsComponent> mainFlowComponentList;
        private List<AbsComponent> disconnectFlowComponentList;
        private List<AbsComponent> errorFlowComponentList;
        private List<AbsComponent> currentFlowComponentList;

        private LogFormatter logFormatter;
        private TimerManager timerManager;
        private Dictionary<string, Variable> variableMap;
        private TempWavFileManager tempWavFileManager;
        private PromptQueue promptQueue;
        private OnlineServices onlineServices;

        private void DisconnectCallAndExitCallflow()
        {
            if (currentFlowComponentList == disconnectFlowComponentList)
                logFormatter.Trace("Callflow finished...");
            else
            {
                logFormatter.Trace("Callflow finished, disconnecting call...");
                MyCall.Terminate();
            }
        }

        private async Task ExecuteErrorFlow()
        {
            if (currentFlowComponentList == errorFlowComponentList)
            {
                logFormatter.Trace("Error during error handler flow, exiting callflow...");
                DisconnectCallAndExitCallflow();
            }
            else if (currentFlowComponentList == disconnectFlowComponentList)
            {
                logFormatter.Trace("Error during disconnect handler flow, exiting callflow...");
                executionFinished = true;
            }
            else
            {
                currentFlowComponentList = errorFlowComponentList;
                currentComponentIndex = 0;
                if (errorFlowComponentList.Count > 0)
                {
                    logFormatter.Trace("Start executing error handler flow...");
                    await ProcessStart();
                }
                else
                {
                    logFormatter.Trace("Error handler flow is empty...");
                    DisconnectCallAndExitCallflow();
                }
            }
        }

        private async Task ExecuteDisconnectFlow()
        {
            currentFlowComponentList = disconnectFlowComponentList;
            currentComponentIndex = 0;
            disconnectFlowPending = false;
            if (disconnectFlowComponentList.Count > 0)
            {
                logFormatter.Trace("Start executing disconnect handler flow...");
                await ProcessStart();
            }
            else
            {
                logFormatter.Trace("Disconnect handler flow is empty...");
                executionFinished = true;
            }
        }

        private EventResults CheckEventResult(EventResults eventResult)
        {
            if (eventResult == EventResults.MoveToNextComponent && ++currentComponentIndex == currentFlowComponentList.Count)
            {
                DisconnectCallAndExitCallflow();
                return EventResults.Exit;
            }
            else if (eventResult == EventResults.Exit)
                DisconnectCallAndExitCallflow();

            return eventResult;
        }

        private void InitializeVariables(string callID)
        {
            // Call variables
            variableMap["session.ani"] = new Variable(MyCall.Caller.CallerID);
            variableMap["session.callid"] = new Variable(callID);
            variableMap["session.dnis"] = new Variable(MyCall.DN.Number);
            variableMap["session.did"] = new Variable(MyCall.Caller.CalledNumber);
            variableMap["session.audioFolder"] = new Variable(Path.Combine(RecordingManager.Instance.AudioFolder, promptQueue.ProjectAudioFolder));
            variableMap["session.transferingExtension"] = new Variable(MyCall["onbehlfof"] ?? string.Empty);

            // Standard variables
            variableMap["RecordResult.NothingRecorded"] = new Variable(RecordComponent.RecordResults.NothingRecorded);
            variableMap["RecordResult.StopDigit"] = new Variable(RecordComponent.RecordResults.StopDigit);
            variableMap["RecordResult.Completed"] = new Variable(RecordComponent.RecordResults.Completed);
            variableMap["MenuResult.Timeout"] = new Variable(MenuComponent.MenuResults.Timeout);
            variableMap["MenuResult.InvalidOption"] = new Variable(MenuComponent.MenuResults.InvalidOption);
            variableMap["MenuResult.ValidOption"] = new Variable(MenuComponent.MenuResults.ValidOption);
            variableMap["UserInputResult.Timeout"] = new Variable(UserInputComponent.UserInputResults.Timeout);
            variableMap["UserInputResult.InvalidDigits"] = new Variable(UserInputComponent.UserInputResults.InvalidDigits);
            variableMap["UserInputResult.ValidDigits"] = new Variable(UserInputComponent.UserInputResults.ValidDigits);
            variableMap["VoiceInputResult.Timeout"] = new Variable(VoiceInputComponent.VoiceInputResults.Timeout);
            variableMap["VoiceInputResult.InvalidInput"] = new Variable(VoiceInputComponent.VoiceInputResults.InvalidInput);
            variableMap["VoiceInputResult.ValidInput"] = new Variable(VoiceInputComponent.VoiceInputResults.ValidInput);

            // User variables
            variableMap["RecordResult.NothingRecorded"] = new Variable(RecordComponent.RecordResults.NothingRecorded);
            variableMap["RecordResult.StopDigit"] = new Variable(RecordComponent.RecordResults.StopDigit);
            variableMap["RecordResult.Completed"] = new Variable(RecordComponent.RecordResults.Completed);
            variableMap["MenuResult.Timeout"] = new Variable(MenuComponent.MenuResults.Timeout);
            variableMap["MenuResult.InvalidOption"] = new Variable(MenuComponent.MenuResults.InvalidOption);
            variableMap["MenuResult.ValidOption"] = new Variable(MenuComponent.MenuResults.ValidOption);
            variableMap["UserInputResult.Timeout"] = new Variable(UserInputComponent.UserInputResults.Timeout);
            variableMap["UserInputResult.InvalidDigits"] = new Variable(UserInputComponent.UserInputResults.InvalidDigits);
            variableMap["UserInputResult.ValidDigits"] = new Variable(UserInputComponent.UserInputResults.ValidDigits);
            variableMap["VoiceInputResult.Timeout"] = new Variable(VoiceInputComponent.VoiceInputResults.Timeout);
            variableMap["VoiceInputResult.InvalidInput"] = new Variable(VoiceInputComponent.VoiceInputResults.InvalidInput);
            variableMap["VoiceInputResult.ValidInput"] = new Variable(VoiceInputComponent.VoiceInputResults.ValidInput);
            
        }

        private void InitializeComponents(ICallflow callflow, ICall myCall, string logHeader)
        {
            {
            LoggerComponent Logger1 = new LoggerComponent("Logger1", callflow, myCall, logHeader);
            Logger1.Level = LoggerComponent.LogLevels.Error;
            Logger1.TextHandler = () => { return Convert.ToString(CFDFunctions.CONCATENATE(Convert.ToString("(DID)Call Transfering To:"),Convert.ToString(variableMap["session.did"].Value))); };
            mainFlowComponentList.Add(Logger1);
            LoggerComponent loggerComponent1 = new LoggerComponent("loggerComponent1", callflow, myCall, logHeader);
            loggerComponent1.Level = LoggerComponent.LogLevels.Error;
            loggerComponent1.TextHandler = () => { return Convert.ToString(CFDFunctions.CONCATENATE(Convert.ToString("(CALL ID)Call Transfering To:"),Convert.ToString(variableMap["session.callid"].Value))); };
            mainFlowComponentList.Add(loggerComponent1);
            LoggerComponent loggerComponent2 = new LoggerComponent("loggerComponent2", callflow, myCall, logHeader);
            loggerComponent2.Level = LoggerComponent.LogLevels.Error;
            loggerComponent2.TextHandler = () => { return Convert.ToString(CFDFunctions.CONCATENATE(Convert.ToString("DNIS IS:"),Convert.ToString(variableMap["session.dnis"].Value))); };
            mainFlowComponentList.Add(loggerComponent2);
            LoggerComponent loggerComponent3 = new LoggerComponent("loggerComponent3", callflow, myCall, logHeader);
            loggerComponent3.Level = LoggerComponent.LogLevels.Error;
            loggerComponent3.TextHandler = () => { return Convert.ToString(CFDFunctions.CONCATENATE(Convert.ToString("ANI IS"),Convert.ToString(variableMap["session.ani"].Value))); };
            mainFlowComponentList.Add(loggerComponent3);
            TransferComponent Transfer1 = new TransferComponent("Transfer1", callflow, myCall, logHeader);
            Transfer1.DestinationHandler = () => { return Convert.ToString(variableMap["session.did"].Value); };
            Transfer1.DelayMilliseconds = 500;
            mainFlowComponentList.Add(Transfer1);
            }
            {
            }
            {
            }
            

            // Add a final DisconnectCall component to the main and error handler flows, in order to complete pending prompt playbacks...
            DisconnectCallComponent mainAutoAddedFinalDisconnectCall = new DisconnectCallComponent("mainAutoAddedFinalDisconnectCall", callflow, myCall, logHeader);
            DisconnectCallComponent errorHandlerAutoAddedFinalDisconnectCall = new DisconnectCallComponent("errorHandlerAutoAddedFinalDisconnectCall", callflow, myCall, logHeader);
            mainFlowComponentList.Add(mainAutoAddedFinalDisconnectCall);
            errorFlowComponentList.Add(errorHandlerAutoAddedFinalDisconnectCall);
        }

        private bool IsServerOfficeHourActive(ICall myCall)
        {
            DateTime nowDt = DateTime.Now;
            Tenant tenant = myCall.PS.GetTenant();
            if (tenant == null || tenant.IsHoliday(new DateTimeOffset(nowDt)))
                return false;

            string overrideOfficeTime = tenant.GetPropertyValue("OVERRIDEOFFICETIME");
            if (!String.IsNullOrEmpty(overrideOfficeTime))
            {
                if (overrideOfficeTime == "1") // Forced to in office hours
                    return true;
                else if (overrideOfficeTime == "2") // Forced to out of office hours
                    return false;
            }

            Schedule officeHours = tenant.Hours;
            Nullable<bool> result = officeHours.IsActiveTime(nowDt);
            return result.GetValueOrDefault(false);
        }

        public Main()
        {
            this.executionStarted = false;
            this.executionFinished = false;
            this.disconnectFlowPending = false;

            this.eventBuffer = new BufferBlock<AbsEvent>();

            this.currentComponentIndex = 0;
            this.mainFlowComponentList = new List<AbsComponent>();
            this.disconnectFlowComponentList = new List<AbsComponent>();
            this.errorFlowComponentList = new List<AbsComponent>();
            this.currentFlowComponentList = mainFlowComponentList;

            this.timerManager = new TimerManager();
            this.timerManager.OnTimeout += (state) => eventBuffer.Post(new TimeoutEvent(state));
            this.variableMap = new Dictionary<string, Variable>();

            AbsTextToSpeechEngine textToSpeechEngine = null;
            AbsSpeechToTextEngine speechToTextEngine = null;
            this.onlineServices = new OnlineServices(textToSpeechEngine, speechToTextEngine);
        }

        public override void Start()
        {
            MyCall.SetBackgroundAudio(false, new string[] { });

            string callID = MyCall?.Caller["chid"] ?? "Unknown";
            string logHeader = $"shyft - CallID {callID}";
            this.logFormatter = new LogFormatter(MyCall, logHeader, "Callflow");
            this.promptQueue = new PromptQueue(this, MyCall, "shyft", logHeader);
            this.tempWavFileManager = new TempWavFileManager(logFormatter);
            this.timerManager.CallStarted();

            InitializeComponents(this, MyCall, logHeader);
            InitializeVariables(callID);
            
            MyCall.OnTerminated += () => eventBuffer.Post(new CallTerminatedEvent());
            MyCall.OnDTMFInput += x => eventBuffer.Post(new DTMFReceivedEvent(x));

            logFormatter.Trace("Start executing main flow...");
            eventBuffer.Post(new StartEvent());
            Task.Run(() => EventProcessingLoop());

            
        }
        
        public void PostStartEvent()
        {
            eventBuffer.Post(new StartEvent());
        }

        public void PostDTMFReceivedEvent(char digit)
        {
            eventBuffer.Post(new DTMFReceivedEvent(digit));
        }

        public void PostPromptPlayedEvent()
        {
            eventBuffer.Post(new PromptPlayedEvent());
        }

        public void PostTransferFailedEvent()
        {
            eventBuffer.Post(new TransferFailedEvent());
        }

        public void PostMakeCallResultEvent(bool result)
        {
            eventBuffer.Post(new MakeCallResultEvent(result));
        }

        public void PostCallTerminatedEvent()
        {
            eventBuffer.Post(new CallTerminatedEvent());
        }

        public void PostTimeoutEvent(object state)
        {
            eventBuffer.Post(new TimeoutEvent(state));
        }

        private async Task EventProcessingLoop()
        {
            executionStarted = true;
            while (!executionFinished)
            {
                AbsEvent evt = await eventBuffer.ReceiveAsync();
                await evt?.ProcessEvent(this);
            }
        }
        
        public async Task ProcessStart()
        {
            try
            {
                EventResults eventResult;
                do
                {
                    AbsComponent currentComponent = currentFlowComponentList[currentComponentIndex];
                    logFormatter.Trace("Start executing component '" + currentComponent.Name + "'");
                    eventResult = await currentComponent.Start(timerManager, variableMap, tempWavFileManager, promptQueue);
                }
                while (CheckEventResult(eventResult) == EventResults.MoveToNextComponent);

                if (eventResult == EventResults.Exit) executionFinished = true;
            }
            catch (Exception exc)
            {
                logFormatter.Error("Error executing last component: " + exc.ToString());
                await ExecuteErrorFlow();
            }
        }

        public async Task ProcessDTMFReceived(char digit)
        {
            try
            {
                AbsComponent currentComponent = currentFlowComponentList[currentComponentIndex];
                logFormatter.Trace("OnDTMFReceived for component '" + currentComponent.Name + "' - Digit: '" + digit + "'");
                EventResults eventResult = CheckEventResult(await currentComponent.OnDTMFReceived(timerManager, variableMap, tempWavFileManager, promptQueue, digit));
                if (eventResult == EventResults.MoveToNextComponent)
                { 
                    if (disconnectFlowPending)
                        await ExecuteDisconnectFlow();
                    else
                        await ProcessStart();
                }
                else if (eventResult == EventResults.Exit)
                    executionFinished = true;
            }
            catch (Exception exc)
            {
                logFormatter.Error("Error executing last component: " + exc.ToString());
                await ExecuteErrorFlow();
            }
        }

        public async Task ProcessPromptPlayed()
        {
            try
            {
                promptQueue.NotifyPlayFinished();
                AbsComponent currentComponent = currentFlowComponentList[currentComponentIndex];
                logFormatter.Trace("OnPromptPlayed for component '" + currentComponent.Name + "'");
                EventResults eventResult = CheckEventResult(await currentComponent.OnPromptPlayed(timerManager, variableMap, tempWavFileManager, promptQueue));
                if (eventResult == EventResults.MoveToNextComponent)
                { 
                    if (disconnectFlowPending)
                        await ExecuteDisconnectFlow();
                    else
                        await ProcessStart();
                }
                else if (eventResult == EventResults.Exit)
                    executionFinished = true;
            }
            catch (Exception exc)
            {
                logFormatter.Error("Error executing last component: " + exc.ToString());
                await ExecuteErrorFlow();
            }
        }

        public async Task ProcessTransferFailed()
        {
            try
            {
                AbsComponent currentComponent = currentFlowComponentList[currentComponentIndex];
                logFormatter.Trace("OnTransferFailed for component '" + currentComponent.Name + "'");
                EventResults eventResult = CheckEventResult(await currentComponent.OnTransferFailed(timerManager, variableMap, tempWavFileManager, promptQueue));
                if (eventResult == EventResults.MoveToNextComponent)
                { 
                    if (disconnectFlowPending)
                        await ExecuteDisconnectFlow();
                    else
                        await ProcessStart();
                }
                else if (eventResult == EventResults.Exit)
                    executionFinished = true;
            }
            catch (Exception exc)
            {
                logFormatter.Error("Error executing last component: " + exc.ToString());
                await ExecuteErrorFlow();
            }
        }

        public async Task ProcessMakeCallResult(bool result)
        {
            try
            {
                AbsComponent currentComponent = currentFlowComponentList[currentComponentIndex];
                logFormatter.Trace("OnMakeCallResult for component '" + currentComponent.Name + "' - Result: '" + result + "'");
                EventResults eventResult = CheckEventResult(await currentComponent.OnMakeCallResult(timerManager, variableMap, tempWavFileManager, promptQueue, result));
                if (eventResult == EventResults.MoveToNextComponent)
                { 
                    if (disconnectFlowPending)
                        await ExecuteDisconnectFlow();
                    else
                        await ProcessStart();
                }
                else if (eventResult == EventResults.Exit)
                    executionFinished = true;
            }
            catch (Exception exc)
            {
                logFormatter.Error("Error executing last component: " + exc.ToString());
                await ExecuteErrorFlow();
            }
        }

        public async Task ProcessCallTerminated()
        {
            try
            {
                if (executionStarted)
                {
                    // First notify the call termination to the current component
                    AbsComponent currentComponent = currentFlowComponentList[currentComponentIndex];
                    logFormatter.Trace("OnCallTerminated for component '" + currentComponent.Name + "'");
                    EventResults eventResult = CheckEventResult(await currentComponent.OnCallTerminated(timerManager, variableMap, tempWavFileManager, promptQueue));
                    if (eventResult == EventResults.MoveToNextComponent)
                    {
                        // Next, if the current component has completed its job, execute the disconnect flow
                        await ExecuteDisconnectFlow();
                    }
                    else if (eventResult == EventResults.Wait)
                    {
                        // If the user component needs more events, wait for it to finish, and signal here that we need to execute
                        // the disconnect handler flow of the callflow next...
                        disconnectFlowPending = true;
                    }
                    else if (eventResult == EventResults.Exit)
                        executionFinished = true;
                }
            }
            catch (Exception exc)
            {
                logFormatter.Error("Error executing last component: " + exc.ToString());
                await ExecuteErrorFlow();
            }
            finally
            {
                // Finally, delete temporary files
                tempWavFileManager.DeleteFilesAndFolders();
            }
        }

        public async Task ProcessTimeout(object state)
        {
            try
            {
                AbsComponent currentComponent = currentFlowComponentList[currentComponentIndex];
                logFormatter.Trace("OnTimeout for component '" + currentComponent.Name + "'");
                EventResults eventResult = CheckEventResult(await currentComponent.OnTimeout(timerManager, variableMap, tempWavFileManager, promptQueue, state));
                if (eventResult == EventResults.MoveToNextComponent)
                { 
                    if (disconnectFlowPending)
                        await ExecuteDisconnectFlow();
                    else
                        await ProcessStart();
                }
                else if (eventResult == EventResults.Exit)
                    executionFinished = true;
            }
            catch (Exception exc)
            {
                logFormatter.Error("Error executing last component: " + exc.ToString());
                await ExecuteErrorFlow();
            }
        }


        
    }
}
